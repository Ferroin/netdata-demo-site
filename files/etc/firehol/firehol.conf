#!/sbin/firehol

FIREHOL_ENABLE_SPINNER=1
FIREHOL_LOG_MODE="NFLOG"

FIREHOL_CONNTRACK_HASHSIZE=$[65536 * 2]
FIREHOL_CONNTRACK_MAX=$[FIREHOL_CONNTRACK_HASHSIZE * 4]


# -----------------------------------------------------------------------------
# services

server_netdata_ports="tcp/19999"
client_netdata_ports="any"

server_gvpe_ports="tcp,udp/49999"
client_gvpe_ports="any"


# -----------------------------------------------------------------------------
# interfaces

wan=
vpns="vpn0"
containers="docker0,lxcbr0"


# -----------------------------------------------------------------------------
# find the WAN interface and IP

# the internet network interface may not be: eth0
# to find it, we use ip route get 8.8.8.8, which returns the device that will
# be used to reach that IP.

# find the WAN interface name
wan="$(ip -4 route get 8.8.8.8 | grep -oP "dev [^[:space:]]+ " | cut -d ' ' -f 2)"
[ -z "${wan}" ] \
    && wan="eth0" \
    && echo >&2 "Assuming default gateway is via device: ${wan}"

# find the IP of the WAN interface
myip=( $(ip -4 address show ${wan} | grep 'inet' | sed 's/.*inet \([0-9\.]\+\).*/\1/') )
if [ ! -z "${myip[*]}" ]
then
    # pass tcp/80,443 through synproxy
    synproxy4 in inface ${wan} dst "${myip[*]}" dport 80,443 accept

    # snat all private IPs (vpn, containers) attempting to reach the internet
    masquerade4 ${wan} src not "${myip[*]}"
else
    echo >&2 "Cannot find interface ${wan} IP(s). Certain features are disabled."
    masquerade4 "${wan}"
fi


# -----------------------------------------------------------------------------
# fix containers dhcp checksum

iptables -t mangle -A POSTROUTING -p udp --dport 68 -j CHECKSUM --checksum-fill


# -----------------------------------------------------------------------------
# accept web traffic only from cloudflare

ipset4 create cloudflare hash:net
ipset4 addfile cloudflare cloudflare.netset

# drop all other traffic to tcp/80,443
ipv4 rule table filter chain INPUT \
    inface ${wan} proto tcp dport 80,443 src not ipset:cloudflare \
    state NEW action DROP loglimit "DROPPED NOT CLOUDFLARE"


# -----------------------------------------------------------------------------
# create docker chains

#iptables -t nat -N DOCKER
#iptables -t filter -N DOCKER
#iptables -t filter -N DOCKER-ISOLATION
docker_bridge docker0 172.17.0.0/16


# -----------------------------------------------------------------------------
# accept SSH on port 2222

# redirect traffic towards tcp/2222 to tcp/22
redirect to 22 proto tcp dport 2222 inface ${wan}

# drop SSH on port 22
redirect to 9 proto tcp dport 22 inface ${wan}


# -----------------------------------------------------------------------------
# packet filtering, protecting this host

# our administration VPN
# DO NOT GIVE IPs, to allow DHCP
interface "${vpns},${containers}" private
    policy accept


# the internet interface
interface any world
    policy drop

    server gvpe accept
    server ssh accept
    server http accept
    server https accept
    server icmp accept
    client all accept


# -----------------------------------------------------------------------------
# packet filtering, protecting the ones we route traffic for

# allow the VPNs and the containers to talk to each other
router private2private \
    inface  "${vpns},${containers}" src "${PRIVATE_IPS}" \
    outface "${vpns},${containers}" dst "${PRIVATE_IPS}"
    policy accept

# allow the VPN and the containers to access (as clients) the internet
router world2private \
    inface not "${vpns},${containers}" src not "${PRIVATE_IPS}" \
    outface    "${vpns},${containers}" dst     "${PRIVATE_IPS}"
    policy reject
    client all accept
