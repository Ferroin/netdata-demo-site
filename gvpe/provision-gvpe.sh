#!/usr/bin/env bash

set -e

ME="$(realpath ${0})"
NULL=
BASE_NETWORK="172.16.254"
PORT="49999"

[ ! -d systemd ] && mkdir -p systemd
[ ! -d keys ] && mkdir -p keys
[ ! -d conf.d ] && mkdir -p conf.d
[ ! -d conf.d/pubkey ] && mkdir -p conf.d/pubkey
[ ! -d conf.d/status ] && mkdir -p conf.d/status

# clean up
rm conf.d/status/* 2>/dev/null || echo >/dev/null
rm conf.d/pubkey/* 2>/dev/null || echo >/dev/null

run() {
    printf >&2 " > "
    printf >&2 "%q " "${@}"
    printf >&2 "\n"

    "${@}"
    return $?
}

cat >conf.d/gvpe.conf <<EOF
# DO NOT EDIT - automatically generated by ${ME}

# -----------------------------------------------------------------------------
global

enable-rawip = yes
ip-proto = 51 # 47 (GRE), 50 (IPSEC, ESP), 51 (IPSEC, AH), 4 (IPIP tunnels), 98 (ENCAP, rfc1241)

enable-icmp = yes
icmp-type = 0 # 0 (echo-reply), 8 (echo-request), 11 (time-exceeded)

enable-udp = yes
udp-port = ${PORT} # the external port to listen on (configure your firewall)

enable-tcp = yes
tcp-port = ${PORT} # the external port to listen on (configure your firewall)

# Sets the maximum MTU that should be used on outgoing packets (basically the
# MTU of the outgoing interface) The daemon will automatically calculate
# maximum overhead (e.g. UDP header size, encryption blocksize...) and pass
# this information to the if-up script.
# Recommended values are 1500 (ethernet), 1492 (pppoe), 1472 (pptp).
# This value must be the minimum of the MTU values of all nodes.
mtu = 1400       # minimum MTU of all outgoing interfaces on all hosts

# the local network device name
ifname = vpn0

# Sets the keepalive probe interval in seconds (default: 60).
# After this many seconds of inactivity the daemon will start to send keepalive
# probe every 3 seconds until it receives a reply from the other end.
# If no reply is received within 15 seconds, the peer is considered unreachable
# and the connection is closed.
keepalive = 5

# loglevel = noise|trace|debug|info|notice|warn|error|critical
loglevel = info

# nfmark = integer
# This advanced option, when set to a nonzero value (default: 0), tries to set
# the netfilter mark (or fwmark) value on all sockets gvpe uses to send packets.
#nfmark = 0

if-up = if-up
node-up = node-up
node-change = node-change
node-down = node-down

private-key = hostkey

# Sets the rekeying interval in seconds (default: 3607).
# Connections are reestablished every rekey seconds, making them use a new
# encryption key.
rekey = 3600

# The configuration serial number. This can be any string up to 16 bytes
# length. Only when the serial matches on both sides of a connection will the
# connection succeed. This is not a security mechanism and eay to spoof, this
# mechanism exists to alert users that their config is outdated.
serial = $(date +%Y%m%d%H%M%S)

# defaults for all nodes
compress = yes


inherit-tos = yes

# The maximum interval in seconds between retries to establish a connection to this node.
max-retry = 600

# Expire packets that couldn't be sent after this many seconds.
max-ttl = 30

# The maximum number of packets that will be queued.
max-queue = 1024

# all hosts can be used are routers, but all the other hosts decide if they need it.
router-priority = 1

EOF

cat >conf.d/hosts.real <<EOF
# BEGIN gvpe real
# DO NOT EDIT - automatically generated by ${ME}
EOF

cat >conf.d/hosts.vpn <<EOF
# BEGIN gvpe vpn
# DO NOT EDIT - automatically generated by ${ME}
EOF

declare -A unique_names=()
declare -A unique_pips=()
declare -A unique_vips=()

c=0
all=
for h in \
    " box                  | 195.97.5.206:${PORT}    | ${BASE_NETWORK}.1   | linux " \
    " costa                | dynamic:$((PORT - 1))   | ${BASE_NETWORK}.2   | none  " \
    " london               | 139.59.166.55:${PORT}   | ${BASE_NETWORK}.10  | linux " \
    " atlanta              | 185.93.0.89:${PORT}     | ${BASE_NETWORK}.20  | linux " \
    " west-europe          | 13.93.125.124:${PORT}   | ${BASE_NETWORK}.30  | linux " \
    " bangalore            | 139.59.0.212:${PORT}    | ${BASE_NETWORK}.40  | linux " \
    " frankfurt            | 46.101.193.115:${PORT}  | ${BASE_NETWORK}.50  | linux " \
    " sanfrancisco         | 104.236.149.236:${PORT} | ${BASE_NETWORK}.60  | linux " \
    " toronto              | 159.203.30.96:${PORT}   | ${BASE_NETWORK}.70  | linux " \
    " singapore            | 128.199.80.131:${PORT}  | ${BASE_NETWORK}.80  | linux " \
    " newyork              | 162.243.236.205:${PORT} | ${BASE_NETWORK}.90  | linux " \
    " aws-fra              | 35.156.164.190:${PORT}  | ${BASE_NETWORK}.100 | linux " \
    " netdata-build-server | 40.68.190.151:${PORT}   | ${BASE_NETWORK}.110 | linux " \
    ${NULL}
do
    c=$((c + 1))
    h="${h// /}" # remove all spaces
    all="${all} ${h}"
    name=$(echo "${h}" | cut -d '|' -f 1)
    p=$(echo "${h}"    | cut -d '|' -f 2)
    vip=$(echo "${h}"  | cut -d '|' -f 3)
    os=$(echo "${h}"   | cut -d '|' -f 4)
    pip=$(echo "${p}"  | cut -d ':' -f 1)
    port=$(echo "${p}" | cut -d ':' -f 2)
    ifupdata="${BASE_NETWORK}.0/24|${vip}"

    hostname_comment=
    connect="always"
    [ "${pip}" = "dynamic" ] && connect="never" && hostname_comment="# "

    [ ! -z "${unique_names[${name}]}" ] && echo >&2 "Name '${name}' for IP ${pip} already exists with IP ${unique_names[${name}]}." && exit 1
    [ "${pip}" != "dynamic" -a ! -z "${unique_pips[${pip}]}" ] && echo >&2 "Public IP '${pip}' for ${name} already exists for ${unique_pips[${pip}]}." && exit 1
    [ ! -z "${unique_vips[${vip}]}" ] && echo >&2 "VPN IP '${vip}' for ${name} already exists for ${unique_vips[${vip}]}." && exit 1

    unique_names[${name}]="${pip}"
    unique_pips[${pip}]="${name}"
    unique_vips[${vip}]="${name}"

    if [ "${pip}" != "dynamic" ]
        then
        printf "%-15s %s\n" "${pip}" "${name}" >>conf.d/hosts.real
    fi
    printf "%-15s %s\n" "${vip}" "${name}" >>conf.d/hosts.vpn

    cat >conf.d/status/${c} <<EOF
nodeid=${c}
name=${name}
status=down
ip=${vip}
si=
rip=${pip}
ripport=${port}
mac=
ifupdata="${ifupdata}"
timestamp=$(date +%s)
EOF

    cat >>conf.d/gvpe.conf <<EOF

# -----------------------------------------------------------------------------
node = ${name}

${hostname_comment}hostname = ${pip}
on ${name} hostname = 0.0.0.0
udp-port = ${port}
tcp-port = ${port}
connect = ${connect} # ondemand | never | always | disabled
on ${name} if-up-data = ${ifupdata}
# allow-direct = *
# deny-direct = *
# router-priority = 2
# on ${name} low-power = yes # on laptops
on ${name} include local.conf
EOF

    cat >systemd/${name}.service <<EOF
# DO NOT EDIT - automatically generated by ${ME}
[Unit]
Description=gvpe
After=network.target
Before=remote-fs.target

[Service]
ExecStart=/usr/local/sbin/gvpe -c /etc/gvpe -D ${name}
KillMode=process
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    if [ ! -f "keys/${name}" -o ! -f "keys/${name}.privkey" ]
    then
        echo >&2 "generating keys for: ${name}"
        cd keys
        run ../sbin/gvpectrl -c ../conf.d -g ${name}
        cd ..
    fi
    if [ ! -f "conf.d/pubkey/${name}" ]
    then
        run cp keys/${name} conf.d/pubkey/${name}
    fi
done

echo "# END gvpe real" >>conf.d/hosts.real
echo "# END gvpe vpn"  >>conf.d/hosts.vpn

# copy the files
for h in ${all}
do
    name=$(echo "${h}" | cut -d '|' -f 1)
    p=$(echo "${h}"    | cut -d '|' -f 2)
    vip=$(echo "${h}"  | cut -d '|' -f 3)
    os=$(echo "${h}"   | cut -d '|' -f 4)
    pip=$(echo "${p}"  | cut -d ':' -f 1)
    port=$(echo "${p}" | cut -d ':' -f 2)

    # do not provision hosts with O/S set to 'none'
    [ "${os}" = "none" ] && continue

    echo >&2
    echo >&2 "Provisioning: ${name}"

    if [ "${os}" = "linux" ]
        then
        run rsync -HaSPv sbin/ root@${pip}:/usr/local/sbin/
    fi

    run cp keys/${name}.privkey conf.d/hostkey
    run rsync -HaSPv --delete conf.d/ root@${pip}:/etc/gvpe/
    run rm conf.d/hostkey
    run ssh "root@${pip}" touch /etc/gvpe/local.conf
    run scp systemd/${name}.service root@${pip}:/etc/systemd/system/gvpe.service || systemd=0
done

# copy the files
for h in ${all}
do
    name=$(echo "${h}" | cut -d '|' -f 1)
    p=$(echo "${h}"    | cut -d '|' -f 2)
    vip=$(echo "${h}"  | cut -d '|' -f 3)
    os=$(echo "${h}"   | cut -d '|' -f 4)
    pip=$(echo "${p}"  | cut -d ':' -f 1)
    port=$(echo "${p}" | cut -d ':' -f 2)

    # do not provision hosts with O/S set to 'none'
    [ "${os}" = "none" ] && continue

    echo >&2
    echo >&2 "Restarting GVPE on: ${name}"
    
    failed=0
    run ssh "root@${pip}" "systemctl daemon-reload && systemctl restart gvpe" || failed=1
    
    if [ $failed -eq 1 ]
    then
        failed=0
        run ssh "root@${pip}" killall gvpe || failed=1
    fi

    if [ $failed -eq 1 ]
    then
        echo >&2 "ERROR: Failed to restart gvpe on ${name} at ${pip}"
    fi
done

